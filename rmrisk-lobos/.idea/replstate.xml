<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1435836595172">{:repl-history {:ide [], :local [&quot;(lobos.analyzer/analyze-schema \&quot;asset\&quot;)&quot; &quot;(-&gt; (analyse-schema) :tables :columns :name :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables :columns :name :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables keys)\n&quot; &quot;(-&gt; (analyze-schema) :tables :users :columns :name :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables :name)&quot; &quot;(-&gt; (analyze-schema) :tables asset)&quot; &quot;(-&gt; (analyze-schema) :tables asset :columns)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns :cname)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns :name)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns  :cname)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns :cname keys)&quot; &quot;(get (analyze-schema) :tables :asset :columns keys)&quot; &quot;((analyze-schema) :tables :asset :columns keys)&quot; &quot;(def ok ((analyze-schema) :tables :asset :columns keys)) &quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns keys :data-type)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description :data-type keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description :data-type)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description :data-type :name key)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description :data-type :name keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :description keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :status_id :data-type :name keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :status_id :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :status_id)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :status_id keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns :status_id :name)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns keys :data-type keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns keys :data-type :name keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns :status_id :data-type :name keys)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns :status_id :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns keys :data-type :name)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns  :data-type :name)&quot; &quot;(def cols (-&gt; (analyze-schema) :tables :asset :columns keys)) &quot; &quot;(map #((-&gt; (analyze-schema) \n           :tables :asset :columns %1 :data-type :name)) cols)&quot; &quot;(map #(-&gt; :asset\n          (analyze-schema) :tables :asset :columns %1 :data-type :name) cols)&quot; &quot;cols&quot; &quot;(map #(-&gt; (analyze-schema) :tables :asset :columns %1 :data-type :name) cols)&quot; &quot;(analyze-schema :table)&quot; &quot;((analyze-schema) :table) &quot; &quot;(-&gt; (analyze-schema) :table) &quot; &quot;(-main \&quot;status2\&quot;)&quot; &quot;(-&gt; (analyze-schema) :tables :asset :columns keys)&quot; &quot;(-&gt; (analyze-schema) :tables)&quot; &quot;(def tabledat (-&gt; (analyze-schema) :tables)) &quot; &quot;(table-data keys)&quot; &quot;(tabledat keys)&quot; &quot;(doall tabledat keys)&quot; &quot;(apply tabledat keys)&quot; &quot;(tabledat)&quot; &quot;tabledat&quot; &quot;(-&gt; tabledat keys)&quot; &quot;(-main \&quot;destroy\&quot;)&quot; &quot;(-main \&quot;build\&quot;)&quot; &quot;(-main \&quot;status\&quot;)&quot; &quot;(status [\&quot;status\&quot;,\&quot;asset\&quot;])&quot; &quot;(def loll [\&quot;hh\&quot;, \&quot;dd\&quot;])&quot; &quot;(def table-data (-&gt; (analyze-schema) :tables)&quot; &quot;(def table-data (-&gt; (analyze-schema) :tables))&quot; &quot;(use 'lobos.analyzer)&quot; &quot;(def table-data2 (-&gt; (analyze-schema) :tables))&quot; &quot;(def loll [\&quot;hh\&quot;, \&quot;asset\&quot;])&quot; &quot;(map #(-&gt; (table-data) %1)\n     (rest loll))&quot; &quot;(map #(-&gt; (table-data) %1)\n     (flatten (rest loll)) )&quot; &quot;(-&gt; (table-data2) \&quot;:asset\&quot;)&quot; &quot;(-&gt; (table-data2) asset)&quot; &quot;(-&gt; (table-data2) :asset)&quot; &quot;(-&gt; (table-data2) :asset keys)&quot; &quot;(-&gt; (table-data2) )&quot; &quot;(print table-data2)&quot; &quot;(print table-data2 :asset)&quot; &quot;(print table-data2 :risk)&quot; &quot;(get table-data2 :risk)&quot; &quot;(table-data2 :risk)&quot; &quot;(use 'lobos.migrations)&quot; &quot;(status \&quot;status\&quot; \&quot;asset\&quot;)&quot; &quot;(status [\&quot;status\&quot;, :asset] )&quot; &quot;(status [\&quot;status\&quot;, (keyword \&quot;asset\&quot;)] )&quot; &quot;(status [\&quot;status\&quot;] )&quot; &quot;arglist&quot; &quot;(def loll [\&quot;hhaha\&quot;,\&quot;sssfse\&quot;])&quot; &quot;(rest loll)&quot; &quot;(loll)&quot; &quot;loll &quot; &quot;(map #(println %1) (rest loll))&quot; &quot;table-data&quot; &quot;(map #(-&gt; table-data (keyword %1)) (rest loll))&quot; &quot;(map #(-&gt; table-data (keyword %1)) (loll))&quot; &quot;(map #(-&gt; table-data (keyword %1)) loll)&quot; &quot;(map #(table-data (keyword %1)) loll)&quot; &quot;(status [\&quot;status\&quot;, \&quot;asset\&quot;] )&quot;], :remote []}}</component>
</project>